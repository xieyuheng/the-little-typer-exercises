Either(Nat, String): Type
Either.inl(vague Nat, vague String, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))))): Either(Nat, String)
Either.inr(vague Nat, vague String, "abc"): Either(Nat, String)
Nat.add1(Nat.add1(Nat.add1(Nat.zero))): Nat
Nat.add1(Nat.add1(Nat.add1(Nat.zero))): Nat
Either.inl(vague [half: Nat | Equal(Nat, Nat.zero, induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) })], vague [haf: Nat | Equal(Nat, Nat.zero, Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) }))], [Nat.zero | refl]): Either([half: Nat | Equal(Nat, Nat.zero, induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) })], [haf: Nat | Equal(Nat, Nat.zero, Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) }))])
Either.inr(vague [half: Nat | Equal(Nat, Nat.add1(Nat.zero), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) })], vague [haf: Nat | Equal(Nat, Nat.add1(Nat.zero), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) }))], [Nat.zero | refl]): Either([half: Nat | Equal(Nat, Nat.add1(Nat.zero), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) })], [haf: Nat | Equal(Nat, Nat.add1(Nat.zero), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) }))])
Either.inl(vague [half: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.zero)), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) })], vague [haf: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.zero)), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) }))], [Nat.add1(Nat.zero) | refl]): Either([half: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.zero)), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) })], [haf: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.zero)), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) }))])
Either.inr(vague [half: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.zero))), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) })], vague [haf: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.zero))), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) }))], [Nat.add1(Nat.zero) | refl]): Either([half: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.zero))), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) })], [haf: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.zero))), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) }))])
Either.inl(vague [half: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) })], vague [haf: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) }))], [Nat.add1(Nat.add1(Nat.zero)) | refl]): Either([half: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) })], [haf: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) }))])
Either.inr(vague [half: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) })], vague [haf: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) }))], [Nat.add1(Nat.add1(Nat.zero)) | refl]): Either([half: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) })], [haf: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) }))])
Either.inl(vague [half: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))))), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) })], vague [haf: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))))), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) }))], [Nat.add1(Nat.add1(Nat.add1(Nat.zero))) | refl]): Either([half: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))))), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) })], [haf: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))))), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) }))])
Either.inr(vague [half: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))))), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) })], vague [haf: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))))), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev1, almost1) => Nat.add1(Nat.add1(almost1.prev)) }))], [Nat.add1(Nat.add1(Nat.add1(Nat.zero))) | refl]): Either([half: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))))), induction (half) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) })], [haf: Nat | Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))))), Nat.add1(induction (haf) { (_target) => Nat case zero => Nat.zero case add1(prev, almost) => Nat.add1(Nat.add1(almost.prev)) }))])