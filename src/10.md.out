[bread: String | Equal(String, bread, "bagel")]: Type
["bagel" | refl]: [bread: String | Equal(String, bread, "bagel")]
[T: Type | T]: Type
[Nat | Nat.add1(Nat.zero)]: [T: Type | T]
[String | "a"]: [T: Type | T]
[(_: Nat) -> Nat | (y) => Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(y))))))]: [T: Type | T]
["toast" | refl]: [food: String | Equal(List(String), List.cons(vague String, food, List.null(vague String)), List.cons(vague String, "toast", List.null(vague String)))]
[Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))))) | Vector.cons(vague String, vague Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))), "pea", Vector.cons(vague String, vague Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))), "pea", Vector.cons(vague String, vague Nat.add1(Nat.add1(Nat.add1(Nat.zero))), "pea", Vector.cons(vague String, vague Nat.add1(Nat.add1(Nat.zero)), "pea", Vector.cons(vague String, vague Nat.add1(Nat.zero), "pea", Vector.cons(vague String, vague Nat.zero, "pea", Vector.null(vague String)))))))]: [length: Nat | Vector(String, length)]
[Nat.add1(Nat.add1(Nat.zero)) | Vector.cons(vague String, vague Nat.add1(Nat.zero), "toast-and-jam", Vector.cons(vague String, vague Nat.zero, "tea", Vector.null(vague String)))]: [length: Nat | Vector(String, length)]
[_: Equal(Nat, Nat.add1(Nat.add1(Nat.zero)), Nat.add1(Nat.add1(Nat.add1(Nat.zero)))) | Equal(String, "apple", "apple")]: Type
[List.null(vague String) | refl]: [list: List(String) | Equal(List(String), list, induction (list) { (_target) => List(String) case null => List.null(vague String) case cons(head, tail, almost) => induction (almost.tail) { (_target) => List(String) case null => List.cons(vague String, head, List.null(vague String)) case cons(head1, tail1, almost1) => List.cons(vague String, head1, almost1.tail) } })]
[List.cons(vague String, "S", List.cons(vague String, "O", List.cons(vague String, "S", List.null(vague String)))) | refl]: [list: List(String) | Equal(List(String), list, induction (list) { (_target) => List(String) case null => List.null(vague String) case cons(head, tail, almost) => induction (almost.tail) { (_target) => List(String) case null => List.cons(vague String, head, List.null(vague String)) case cons(head1, tail1, almost1) => List.cons(vague String, head1, almost1.tail) } })]
[List.cons(vague String, "A", List.cons(vague String, "B", List.cons(vague String, "B", List.cons(vague String, "A", List.null(vague String))))) | refl]: [list: List(String) | Equal(List(String), list, induction (list) { (_target) => List(String) case null => List.null(vague String) case cons(head, tail, almost) => induction (almost.tail) { (_target) => List(String) case null => List.cons(vague String, head, List.null(vague String)) case cons(head1, tail1, almost1) => List.cons(vague String, head1, almost1.tail) } })]
[List.null(vague String) | refl]: [list: List(String) | Equal(List(String), induction (list) { (_target) => List(String) case null => List.cons(vague String, "grape", List.null(vague String)) case cons(head, tail, almost) => List.cons(vague String, head, almost.tail) }, List.cons(vague String, "grape", list))]
[List.cons(vague String, "grape", List.null(vague String)) | refl]: [list: List(String) | Equal(List(String), induction (list) { (_target) => List(String) case null => List.cons(vague String, "grape", List.null(vague String)) case cons(head, tail, almost) => List.cons(vague String, head, almost.tail) }, List.cons(vague String, "grape", list))]
[List.cons(vague String, "grape", List.cons(vague String, "grape", List.null(vague String))) | refl]: [list: List(String) | Equal(List(String), induction (list) { (_target) => List(String) case null => List.cons(vague String, "grape", List.null(vague String)) case cons(head, tail, almost) => List.cons(vague String, head, almost.tail) }, List.cons(vague String, "grape", list))]
Vector.cons(vague String, vague Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))), "hi", Vector.cons(vague String, vague Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))), "hi", Vector.cons(vague String, vague Nat.add1(Nat.add1(Nat.add1(Nat.zero))), "hi", Vector.cons(vague String, vague Nat.add1(Nat.add1(Nat.zero)), "hi", Vector.cons(vague String, vague Nat.add1(Nat.zero), "hi", Vector.cons(vague String, vague Nat.zero, "hi", Vector.null(vague String))))))): Vector(String, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))))))
Vector.null(vague Nat): Vector(Nat, Nat.zero)
Vector.cons(vague Nat, vague Nat.zero, Nat.add1(Nat.zero), Vector.null(vague Nat)): Vector(Nat, Nat.add1(Nat.zero))
Vector.cons(vague Nat, vague Nat.add1(Nat.zero), Nat.add1(Nat.zero), Vector.cons(vague Nat, vague Nat.zero, Nat.add1(Nat.add1(Nat.zero)), Vector.null(vague Nat))): Vector(Nat, Nat.add1(Nat.add1(Nat.zero)))
Vector.cons(vague Nat, vague Nat.add1(Nat.add1(Nat.zero)), Nat.add1(Nat.zero), Vector.cons(vague Nat, vague Nat.add1(Nat.zero), Nat.add1(Nat.add1(Nat.zero)), Vector.cons(vague Nat, vague Nat.zero, Nat.add1(Nat.add1(Nat.add1(Nat.zero))), Vector.null(vague Nat)))): Vector(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.zero))))