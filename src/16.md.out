Either.inl(vague Equal(Nat, 0, 0), vague (_: Equal(Nat, 0, 0)) -> Absurd, refl): Either(Equal(Nat, 0, 0), (_: Equal(Nat, 0, 0)) -> Absurd)
Either.inr(vague Equal(Nat, 0, 1), vague (_: Equal(Nat, 0, 1)) -> Absurd, (equal) => the(Absurd, replace(equal, (n) => nat_ind(n, (target_nat) => Type, Trivial, (_, _1) => Absurd), sole))): Either(Equal(Nat, 0, 1), (_: Equal(Nat, 0, 1)) -> Absurd)
Either.inr(vague Equal(Nat, 0, 2), vague (_: Equal(Nat, 0, 2)) -> Absurd, (equal) => the(Absurd, replace(equal, (n) => nat_ind(n, (target_nat) => Type, Trivial, (_, _1) => Absurd), sole))): Either(Equal(Nat, 0, 2), (_: Equal(Nat, 0, 2)) -> Absurd)
Either.inr(vague Equal(Nat, 0, 3), vague (_: Equal(Nat, 0, 3)) -> Absurd, (equal) => the(Absurd, replace(equal, (n) => nat_ind(n, (target_nat) => Type, Trivial, (_, _1) => Absurd), sole))): Either(Equal(Nat, 0, 3), (_: Equal(Nat, 0, 3)) -> Absurd)
Either.inl(vague Equal(Nat, 0, 0), vague (_: Equal(Nat, 0, 0)) -> Absurd, refl): Either(Equal(Nat, 0, 0), (_: Equal(Nat, 0, 0)) -> Absurd)
Either.inr(vague Equal(Nat, 1, 0), vague (_: Equal(Nat, 1, 0)) -> Absurd, (equal) => the(Absurd, replace(equal, (n) => nat_ind(n, (target_nat) => Type, Absurd, (prev_y, _1) => Equal(Nat, 0, prev_y)), refl))): Either(Equal(Nat, 1, 0), (_: Equal(Nat, 1, 0)) -> Absurd)
Either.inr(vague Equal(Nat, 0, 1), vague (_: Equal(Nat, 0, 1)) -> Absurd, (equal) => the(Absurd, replace(equal, (n) => nat_ind(n, (target_nat) => Type, Trivial, (_, _1) => Absurd), sole))): Either(Equal(Nat, 0, 1), (_: Equal(Nat, 0, 1)) -> Absurd)
Either.inr(vague Equal(Nat, 6, 4), vague (_: Equal(Nat, 6, 4)) -> Absurd, (equal) => the(Absurd, replace(replace(replace(replace(replace(equal, (n) => nat_ind(n, (target_nat) => Type, Absurd, (prev_y, _1) => Equal(Nat, 5, prev_y)), refl), (n) => nat_ind(n, (target_nat) => Type, Absurd, (prev_y, _1) => Equal(Nat, 4, prev_y)), refl), (n) => nat_ind(n, (target_nat) => Type, Absurd, (prev_y, _1) => Equal(Nat, 3, prev_y)), refl), (n) => nat_ind(n, (target_nat) => Type, Absurd, (prev_y, _1) => Equal(Nat, 2, prev_y)), refl), (n) => nat_ind(n, (target_nat) => Type, Absurd, (prev_y, _1) => Equal(Nat, 1, prev_y)), refl))): Either(Equal(Nat, 6, 4), (_: Equal(Nat, 6, 4)) -> Absurd)