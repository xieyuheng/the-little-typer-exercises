Either.inl(vague Equal(Nat, Nat.zero, Nat.zero), vague (_: Equal(Nat, Nat.zero, Nat.zero)) -> Absurd, refl): Either(Equal(Nat, Nat.zero, Nat.zero), (_: Equal(Nat, Nat.zero, Nat.zero)) -> Absurd)
Either.inr(vague Equal(Nat, Nat.zero, Nat.add1(Nat.zero)), vague (_: Equal(Nat, Nat.zero, Nat.add1(Nat.zero))) -> Absurd, (equal) => the(Absurd, replace(equal, (n) => induction (n) { (_target) => Type case zero => Trivial case add1(prev, almost) => Absurd }, sole))): Either(Equal(Nat, Nat.zero, Nat.add1(Nat.zero)), (_: Equal(Nat, Nat.zero, Nat.add1(Nat.zero))) -> Absurd)
Either.inr(vague Equal(Nat, Nat.zero, Nat.add1(Nat.add1(Nat.zero))), vague (_: Equal(Nat, Nat.zero, Nat.add1(Nat.add1(Nat.zero)))) -> Absurd, (equal) => the(Absurd, replace(equal, (n) => induction (n) { (_target) => Type case zero => Trivial case add1(prev, almost) => Absurd }, sole))): Either(Equal(Nat, Nat.zero, Nat.add1(Nat.add1(Nat.zero))), (_: Equal(Nat, Nat.zero, Nat.add1(Nat.add1(Nat.zero)))) -> Absurd)
Either.inr(vague Equal(Nat, Nat.zero, Nat.add1(Nat.add1(Nat.add1(Nat.zero)))), vague (_: Equal(Nat, Nat.zero, Nat.add1(Nat.add1(Nat.add1(Nat.zero))))) -> Absurd, (equal) => the(Absurd, replace(equal, (n) => induction (n) { (_target) => Type case zero => Trivial case add1(prev, almost) => Absurd }, sole))): Either(Equal(Nat, Nat.zero, Nat.add1(Nat.add1(Nat.add1(Nat.zero)))), (_: Equal(Nat, Nat.zero, Nat.add1(Nat.add1(Nat.add1(Nat.zero))))) -> Absurd)
Either.inl(vague Equal(Nat, Nat.zero, Nat.zero), vague (_: Equal(Nat, Nat.zero, Nat.zero)) -> Absurd, refl): Either(Equal(Nat, Nat.zero, Nat.zero), (_: Equal(Nat, Nat.zero, Nat.zero)) -> Absurd)
Either.inr(vague Equal(Nat, Nat.add1(Nat.zero), Nat.zero), vague (_: Equal(Nat, Nat.add1(Nat.zero), Nat.zero)) -> Absurd, (equal) => the(Absurd, replace(equal, (n) => induction (n) { (_target) => Type case zero => Absurd case add1(prev, almost) => Equal(Nat, Nat.zero, prev) }, refl))): Either(Equal(Nat, Nat.add1(Nat.zero), Nat.zero), (_: Equal(Nat, Nat.add1(Nat.zero), Nat.zero)) -> Absurd)
Either.inr(vague Equal(Nat, Nat.zero, Nat.add1(Nat.zero)), vague (_: Equal(Nat, Nat.zero, Nat.add1(Nat.zero))) -> Absurd, (equal) => the(Absurd, replace(equal, (n) => induction (n) { (_target) => Type case zero => Trivial case add1(prev, almost) => Absurd }, sole))): Either(Equal(Nat, Nat.zero, Nat.add1(Nat.zero)), (_: Equal(Nat, Nat.zero, Nat.add1(Nat.zero))) -> Absurd)
Either.inr(vague Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))))), Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))), vague (_: Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))))), Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))))) -> Absurd, (equal) => the(Absurd, replace(replace(replace(replace(replace(equal, (n) => induction (n) { (_target) => Type case zero => Absurd case add1(prev, almost) => Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))), prev) }, refl), (n) => induction (n) { (_target) => Type case zero => Absurd case add1(prev, almost) => Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))), prev) }, refl), (n) => induction (n) { (_target) => Type case zero => Absurd case add1(prev, almost) => Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.zero))), prev) }, refl), (n) => induction (n) { (_target) => Type case zero => Absurd case add1(prev, almost) => Equal(Nat, Nat.add1(Nat.add1(Nat.zero)), prev) }, refl), (n) => induction (n) { (_target) => Type case zero => Absurd case add1(prev, almost) => Equal(Nat, Nat.add1(Nat.zero), prev) }, refl))): Either(Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))))), Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero))))), (_: Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))))), Nat.add1(Nat.add1(Nat.add1(Nat.add1(Nat.zero)))))) -> Absurd)